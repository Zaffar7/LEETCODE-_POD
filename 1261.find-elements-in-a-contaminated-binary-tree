21/02/2025
leetcode:https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/description/?envType=daily-question&envId=2025-02-21
java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class FindElements {
TreeNode root;
    public FindElements(TreeNode root) {
     this.root = root;
        root.val = 0;
        recover(root);
          }
       void recover(TreeNode node) {
        if (node == null) return;

        if (node.left != null) {
            node.left.val = 2 * node.val + 1;
            recover(node.left); // Corrected recursive call
        }
        if (node.right != null) {
            node.right.val = 2 * node.val + 2;
            recover(node.right); // Corrected recursive call
        }
    } 
    
    public boolean find(int target) {
     return search(root,target);}

    boolean search(TreeNode root, int target) {
       /* if (node == null) return false;
        if (node.val == target) return true;
        return search(node.left, target) || search(node.right, target);*/
         if(root.val==target) return true;
         if (root.left != null && search(root.left, target)) return true;
    if (root.right != null && search(root.right, target)) return true;
    return false;
    }
}

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements obj = new FindElements(root);
 * boolean param_1 = obj.find(target);
 */
