30/01/2025
leetcode :https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/description/
approach - first check bipartite then apply levelwise bfs and cal level then maximize group
***java***
class Solution {
     class bipair{
        int vtx;
        int dis;
        public bipair(int vtx, int dis){
            this.vtx=vtx;
            this.dis = dis;
        }
    }
    public int magnificentSets(int n, int[][] edges) {
         Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int i = 0; i < n; i++) {
            adj.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            int u = edge[0] - 1;
            int v = edge[1] - 1;
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        //bipartite check 
        if(bipartite(adj)==false) return -1; 
        //bfs for level
        int[] levels = new int[n];
        for (int node = 0; node < n; node++) {
            levels[node] = bfs(adj, node, n);
        }
        int maxGroupEachComp = 0;
        boolean[] visited = new boolean[n];
        for (int node = 0; node < n; node++) {
            if (!visited[node]) {
                maxGroupEachComp += getMaxFromEachComp(adj, node, visited, levels);
            }
        }

        return maxGroupEachComp;

    }
     public boolean bipartite(Map<Integer, List<Integer>> adj) {
        HashMap<Integer,Integer> visited = new HashMap<>();
        Queue<bipair>q = new LinkedList<>();
        for(int src=0;src<adj.size();src++){
        if(visited.containsKey(src)) continue;
        q.add(new bipair(src,0));
        while(q.size()>0){
            bipair rv =q.poll();
            if(visited.containsKey(rv.vtx)){
            if(visited.get(rv.vtx)!=rv.dis) return false;
            else {
            continue;
        }  }
            visited.put(rv.vtx,rv.dis);
            for(int nbrs: adj.get(rv.vtx)){
                if(!visited.containsKey(nbrs)){
                    bipair np= new bipair(nbrs,rv.dis+1);
                    q.add(np);
                }
            }
        }
        }
        return true;
    }
     public int bfs(Map<Integer, List<Integer>> adj, int currNode, int n) {
        Queue<Integer> que = new LinkedList<>();
        boolean[] visited = new boolean[n];
        que.add(currNode);
        visited[currNode] = true;

        int level = 1;
        while (!que.isEmpty()) {
            int size = que.size();
            while (size-- > 0) {
                int curr = que.poll();
                
                for (int ngbr : adj.get(curr)) {
                    if (visited[ngbr]) continue;
                    
                    que.add(ngbr);
                    visited[ngbr] = true;
                }
            }
            level++;
        }
        return level - 1;
    }
 public int getMaxFromEachComp(Map<Integer, List<Integer>> adj, int curr, boolean[] visited, int[] levels) {
        int maxGrp = levels[curr];
        visited[curr] = true;
        for (int ngbr : adj.get(curr)) {
            if (!visited[ngbr]) {
          maxGrp = Math.max(maxGrp, getMaxFromEachComp(adj, ngbr, visited, levels));
            }
        }
        return maxGrp;
 }
}
