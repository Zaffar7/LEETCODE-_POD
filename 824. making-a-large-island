31/01/2025
leetcode:https://leetcode.com/problems/making-a-large-island/
approach-apply dfs on grid  cal area  then again traverse only one zero to convert one check max island area
class Solution {
    public int largestIsland(int[][] grid) {
     int  m = grid.length;
     HashMap<Integer,Integer> map= new HashMap<>();
     int max=Integer.MIN_VALUE;
     int id=2;
//n == grid[i].length
        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    int count=0;
                int cnt=  dfs(id,i,j, m,grid);
                    map.put(id,cnt);
                    id++;
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0){
                    int sum=1;
                    HashSet<Integer>vis= new HashSet<>();
          if(checkvalid(i-1,j,m) && grid[i-1][j]>1 && vis.add(grid[i-1][j])){
            int x=map.get(grid[i-1][j]);
            sum+=x;
          }
          if(checkvalid(i+1,j,m) && grid[i+1][j]>1 && vis.add(grid[i+1][j])){
            int x=map.get(grid[i+1][j]);
            sum+=x;
          }
          if(checkvalid(i,j+1,m) && grid[i][j+1]>1 && vis.add(grid[i][j+1])){
            int x=map.get(grid[i][j+1]);
            sum+=x;
          }
          if(checkvalid(i,j-1,m) && grid[i][j-1]>1 && vis.add(grid[i][j-1])){
            int x=map.get(grid[i][j-1]);
            sum+=x;
          }
          max=Math.max(max,sum);
                }
            }
        }
        return (max==Integer.MIN_VALUE)?m*m:max;

    }
    int dfs(int id,  int i, int j, int m,int [][]grid){int count=1;
       if (i < 0 || j < 0 || i >= m || j >= m || grid[i][j] != 1) return 0;
         grid[i][j]=id;
        
       count +=  dfs(id,i+1,j,m,grid);
      count +=   dfs(id,i-1,j,m,grid);
      count +=   dfs(id,i,j+1,m,grid);
      count +=   dfs(id,i,j-1,m,grid);
        return count;
    }
    boolean checkvalid(int i,int j, int m){
         return i >= 0 && j >= 0 && i < m && j < m;
    }
}
